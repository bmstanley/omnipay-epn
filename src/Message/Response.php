<?php

namespace Omnipay\eProcessingNetwork\Message;

use Omnipay\Common\Message\AbstractResponse as OmnipayAbstractResponse;

class Response extends OmnipayAbstractResponse
{
    public function getMessage(): string
    {
        if ($this->isSuccessful()) {
            return $this->getValue('RespText');
        }

        return $this->getErrorMessage();
    }

    protected function getErrorMessage(): string
    {
        $responseText = $this->getValue('RespText');
        switch ($responseText) {
            case 'Amount Error':
                return 'Invalid charge amount';
            case 'Expired Card':
                return 'The given credit card is expired';
            case 'CVV Mismatch':
                return 'Invalid security code';
        }

        // X and Y AVS Codes are success codes
        if (!in_array($this->getValue('AVSCode'), ['X', 'Y'])) {
            return $this->getValue('AVSText');
        }

        if ($this->getValue('CVV2Code') && $this->getValue('CVV2Code') !== 'M') {
            return $this->getValue('CVV2Text');
        }

        return 'The card was declined';
    }

    /**
     * Gateway Reference
     *
     * @return null|string A reference provided by the gateway to represent this transaction
     */
    public function getTransactionReference(): ?string
    {
        return $this->getValue('Tran_token');
    }

    /**
     * Get the transaction ID as generated by the merchant website.
     *
     * @return string|null
     */
    public function getTransactionId(): ?string
    {
        return $this->getValue('XactID');
    }

    /**
     * Get the invoice ID as generated by the merchant website.
     *
     * @return string
     */
    public function getInvoiceId(): string
    {
        return $this->getValue('Invoice');
    }

    /**
     * Get the recurring ID as generated by the merchant website.
     *
     * @return string
     */
    public function getSubscriptionId(): string
    {
        return $this->getValue('RecurID');
    }

    public function isSuccessful(): bool
    {
        return strcasecmp($this->getValue('Success'), 'y') === 0;
    }

    /**
     * @param string $key
     * @return string|null
     */
    protected function getValue(string $key): ?string
    {
        return $this->getData()[$key] ?? null;
    }
}
